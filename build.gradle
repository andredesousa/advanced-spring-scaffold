buildscript {
  dependencies {
    classpath 'org.postgresql:postgresql:42.2.24'
    classpath 'com.smartnews:jpa-entity-generator:0.99.8'
  }
}

plugins {
    id 'com.diffplug.spotless' version '5.15.1'
    id 'com.github.ben-manes.versions' version '0.39.0'
    id 'com.github.johnrengelman.processes' version '0.5.0'
    id 'com.github.spotbugs' version '4.7.5'
    id 'com.star-zero.gradle.githook' version '1.2.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.flywaydb.flyway' version '7.15.0'
	id 'org.springframework.boot' version '2.5.5'
    id 'org.owasp.dependencycheck' version '6.3.2'
    id 'org.sonarqube' version '3.3'
    id 'org.springdoc.openapi-gradle-plugin' version '1.3.3'
    id 'pl.allegro.tech.build.axion-release' version '1.13.3'
    id 'ru.netris.commitlint' version '1.4.1'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.71.4'
    id 'checkstyle'
	id 'java'
    id 'jacoco'
    id 'pmd'
}

group = 'app'
version = scmVersion.version
sourceCompatibility = '11'
apply plugin: 'entitygen'

repositories {
	mavenCentral()
}

sourceSets {
    integrationTest {
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
    smokeTest {
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

processResources {
    filesMatching("**/application.properties") {
        expand(project.properties)
    }
}

dependencies {
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    implementation 'org.projectlombok:lombok:1.18.22'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'
    runtimeOnly 'org.postgresql:postgresql:42.2.24'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.assertj:assertj-core:3.21.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:testcontainers:1.16.0'
    testImplementation 'org.testcontainers:junit-jupiter:1.16.0'
	testImplementation 'org.testcontainers:postgresql:1.16.0'

    integrationTestImplementation sourceSets.main.runtimeClasspath
    integrationTestImplementation sourceSets.test.runtimeClasspath
    smokeTestImplementation sourceSets.main.runtimeClasspath
    smokeTestImplementation sourceSets.test.runtimeClasspath
}

githook {
    failOnMissingHooksDir = false
    hooks {
        'commit-msg' {
            task = 'commitlint'
        }
    }
}

openApi {
    outputDir = file('build/docs')
}

bootBuildImage {
	imageName = 'spring-api:latest'
}

checkstyle {
    toolVersion = '9.0'
    configFile = file('checkstyle.xml')
}

pmd {
    toolVersion = '6.38.0'
}

spotless {
    java {
        target 'src/**/*.java'
        importOrder()
        removeUnusedImports()
        prettier([
            'prettier': '2.4.1',
            'prettier-plugin-java': '1.4.0'
        ]).configFile('.prettierrc')
    }
}

spotbugs {
  toolVersion = '4.4.1'
}

sonarqube {
    properties {
        property 'sonar.projectKey', ''
        property 'sonar.projectName', ''
        property 'sonar.host.url', ''
        property 'sonar.login', ''
    }
}

flyway {
    url = DB_URL
    user = DB_USER
    password = DB_PASSWORD
}

entityGen {
    configPath = 'src/main/resources/db/entity-generator.yaml'
}

jacoco {
    toolVersion = '0.8.7'
}

jacocoTestReport {
    dependsOn test
    finalizedBy jacocoTestCoverageVerification
    reports {
        xml.required = true
    }
}

jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

test {
    finalizedBy jacocoTestReport
	useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'Verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

task smokeTest(type: Test) {
    description = 'Runs the smoke tests.'
    group = 'Verification'
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath

    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

task generateEntities(type: Exec) {
    description = 'Generates the entities sources.'
    group = 'Build'
    commandLine './gradlew', 'entityGen', 'format'
    environment([DB_URL: DB_URL, DB_USER: DB_USER, DB_PASSWORD: DB_PASSWORD])
    doLast {
        ant.replace(token: '\\\"', value: '') {
            fileset(dir: 'src/main/java/app/entities')
        }
    }
}

task lint() {
    dependsOn 'formatCheck', 'checkstyle', 'pmd', 'spotbugs'
    description = 'Runs several static code analysis.'
    group = 'Verification'
}

task checkstyle() {
    dependsOn 'checkstyleIntegrationTest', 'checkstyleMain', 'checkstyleSmokeTest', 'checkstyleTest'
    description = 'Runs Checkstyle analysis for the source folder.'
    group = 'Verification'
}

task pmd() {
    dependsOn 'pmdIntegrationTest', 'pmdMain', 'pmdSmokeTest', 'pmdTest'
    description = 'Runs PMD analysis for the source folder.'
    group = 'Verification'
}

task spotbugs() {
    dependsOn 'spotbugsIntegrationTest', 'spotbugsMain', 'spotbugsSmokeTest', 'spotbugsTest'
    description = 'Runs SpotBugs analysis for the source folder.'
    group = 'Verification'

    tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
        reports {
            html.enabled = true
        }
    }
}

task format() {
    dependsOn 'spotlessApply'
    description = 'Applies code formatting steps to source code in-place.'
    group = 'Verification'
}

task formatCheck() {
    dependsOn 'spotlessCheck'
    description = 'Checks that source code satisfies formatting steps.'
    group = 'Verification'
}

task generateChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    description = 'Generates a changelog from GIT repository.'
    group = 'Release'
    fromRepo = file('.')
    file = file('CHANGELOG.md');
    templateContent = file('changelog.mustache').getText('UTF-8');
}

task deploy(type: Exec) {
    commandLine 'ansible-playbook', 'cicd/deploy/deploy-to-swarm.yaml'
    description = 'Deploys the application to Docker Swarm.'
    group = 'Release'
}
